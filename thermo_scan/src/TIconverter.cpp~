#include <stdio.h>
#include <stdlib.h>

#include "ros/ros.h"

#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"

#include "std_msgs/Float32MultiArray.h"
#include "sensor_msgs/Image.h"

// グローバル変数設定
double Thermo[60][80];	// 温度データの配列
			// Thermo[行][列]ではなく[列][行]なのはOpenCVと統一するため
sensor_msgs::Image::ConstPtr image;

//=============================================
//@name TIconvert
//@brief 熱画像から温度を抜きだしThermo配列に代入する
//@data 2013/10/21
//@attention 温度データは１点飛ばしで取得する
//=============================================	
void TIconvert()
{
  // TODO:要作成
  // imageから温度データを抜き出してThermo配列に代入する
  // 温度[deg]への変換、90度回転、1点飛ばしの3つの処理が必要
}

//=============================================
//@name thermoCallback
//@brief msgで受け取った熱画像を格納する
//@data 2013/10/21
//@attention
//=============================================	
void Thermal_image_Callback(const sensor_msgs::Image::ConstPtr& thermal_image)
{
  // 取得を示すROS_INFOを流す
  ROS_INFO("Now get thermal_image");

  // 取得したthermal_imageを変数に格納する
  image = thermal_image;
  
}

//=============================================
//@name main
//@brief メインループ
//@data 2013/10/21
//@attention
//=============================================	
int main(int argc, char **argv)
{
	// ROSの初期設定
	ros::init(argc, argv, "TIconverter");
	ros::NodeHandle n;
	ros::Rate loop_rate(5);	// ループの待機時間(Hz)

	// 熱画像受信用のサブスクライバーの定義
	ros::Subscriber thermal_image_sub = n.subscribe("Thermal_image", 100, thermal_image_Callback);

	// 温度データ配信用のパブリッシャーの定義
	ros::Publisher pub = n.advertise<std_msgs::Float32MultiArray>("Thermo", 100);

	// 配信する配列のmsgを定義
	std_msgs::Float32MultiArray thermo_msg;

	// メインループ
	while (ros::ok())
	{
		// msg配列の初期化
		thermo_msg.data.clear();

		// コールバックを呼び出して熱画像の取得
		ros::spinOnce();

		// 熱画像を温度データに変換する関数の呼び出し
		TIconvert();

		// msg配列にデータを入れるループ
		// 注釈：配列でmsgを送るときは
		//	{msg名}.data.push_back({値})
		//	を使ってmsg配列の最後尾にデータを付け足していく形でmsgを作る
		//	そのため、多次元配列の場合、forループで何ちゃって多次元配列msgを作る
		for (int j = 0; j < 80; j++){	// jは行のループ
			for (int i = 0; i < 60; i++)	// iは列のループ
			{
				// 温度データをmsg配列に代入
				// 注釈：thermoデータの並びは
				//	(1,1)→(1,2)→・・・→(1,60)→(2,1)→・・・
				//	にしてください
				//	(熱画像の左上(1,1),右上(1,60),左下(80,1),右下(80,60))
				thermo_msg.data.push_back(Thermo[i][j]);
			}
		}

		// msg配列を配信する
		pub.publish(thermo_msg);

		// ROS_INFOで配信していることを伝える
		ROS_INFO("I published something!");
		ros::spinOnce();

		// 次のデータを送る前にloop_rateだけ待機
		loop_rate.sleep();
	}
	return 0;
}
