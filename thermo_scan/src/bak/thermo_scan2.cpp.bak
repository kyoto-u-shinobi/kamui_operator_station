//=================================================//
/*! @file
 @brief カメラユニットの首振り処理のノード
 @author D.Furutani(original) edit by K.Muro
 @date 2014/02/20
 @attention Dynamixcelを用いて首振りを行う

 @TODO プログラムの整理と待機時間の調整
*/
//=================================================//

using namespace std;

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "ros/ros.h"

#include "std_msgs/Bool.h"
#include "std_msgs/Int16.h"
#include <std_msgs/Int32.h>
#include "std_msgs/Float64.h"
#include "std_msgs/String.h"
#include "dynamixel_msgs/JointState.h"
#include "set_state/pubState.h"
#include "dynamixel_controllers/SetSpeed.h"
#include "sensor_msgs/LaserScan.h"

#include <sstream>

// グローバル変数設定
bool blob_detect = false;	// 熱源発見の有無
bool Init_flag = true;		// ダイナミクセルの初期位置への移動フラグ
bool Scanning_flag = false;		// ダイナミクセルの初期位置への移動フラグ

int Scan_state = 0;	// カメラユニットの首振り状態
			// Scan_state=0:通常状態
			// Scan_state=1:強化探査状態
			// Scan_state=2:待機状態
			// Scan_state=3:通常状態でVictim発見
			// Scan_state=4:強化探査状態でVictim発見
			// Scan_state=5:Stop_temp状態
			// Scan_state=6:Stop_tempの折り返し条件を満たした状態
std::string state = "Waiting";	// ロボットの状態
		// state=0:Normal
		// state=1:Tracking
		// state=2:Rotating
		// state=3:Closing
		// state=4:Scanning
		// state=5:GetInfo
		// state=6:Leaving
		// state=7:Stop_temp
		// state=8:Waiting

//首ふり関連☆
//CAM_2は強化探査時のカメラユニットの動き
#define MAX_YAW_ANGLE_CAM	(M_PI*100)/180	// センサユニットヨー角の最大角度(rad)
#define MIN_YAW_ANGLE_CAM	-MAX_YAW_ANGLE_CAM	// センサユニットヨー角の最少角度(rad)
#define STEP_COUNT			5				// ステップ数 通常探索
#define STEP_COUNT2			(STEP_COUNT*2)				// ステップ数 強化探索
#define ONE_STEP_ANGLE_CAM	((MAX_YAW_ANGLE_CAM - MIN_YAW_ANGLE_CAM)/2/STEP_COUNT)	// １ステップ(rad) 通常探索
#define ONE_STEP_ANGLE_CAM2	((MAX_YAW_ANGLE_CAM - MIN_YAW_ANGLE_CAM)/2/STEP_COUNT2)	// １ステップ(rad) 強化探索
#define MOTOR_SPEED		2.0		// speed of motor (normal)
#define MOTOR_SPEED2	1.0		// speed of motor (scanning)
#define SLEEP_TIME	0.4	// １ステップの時間 [sec]

#define error_limit             (M_PI*3)/180    //  首振りDynamixel初期位置出しエラー判定値(rad)   
double error_cur = error_limit*2;

std_msgs::Float64 tilt_controller_command_msg;
double target_camera_direction;

#define AVE_NUM 10
double targets[AVE_NUM] = {0};

//#define WAGGING_SPEED_CAM	100	// １ステップの所要時間の1/4の値[ms]
//#define WAGGING_SPEED_CAM2	100	// １ステップの所要時間の1/4の値[ms]
//#define PROCESSING_TIME	600	// 画像処理の待機時間
//#define SCAN_SPEED_PI		200	// 熱画像のスキャン間隔[ms]

void DynaCallback(const dynamixel_msgs::JointState::ConstPtr& msg)
{                      
	error_cur = fabs(msg->error);
	//ROS_INFO("current error: %f [rad]", error_cur);	//debug
}

//カメラユニットの首振り制御のクラス=========================================//
class ThermalScanning
{
private:
	int pm;			// pm=1:左回り、pm=-1:右回り
	double start_angle;	// スタート角度
	double end_angle;		// 折り返し角度
	double Dyna_angle;	// ダイナミクセルの角度
	int switch_num;	// stop_tempの時の折り返し回数
	dynamixel_controllers::SetSpeed srv;
	set_state::pubState state_srv;
	int scan_count;	// 強化探索スキャン回数カウント

public:
	int cw;

	ThermalScanning()
	{
		//cw = false;
	    cw=-1;
		switch_num = 0;
		scan_count = 0;
		dyna_client = n.serviceClient<dynamixel_controllers::SetSpeed>("tilt_controller/set_speed");
		state_client = n.serviceClient<set_state::pubState>("pubState");
	}

	void InitScan(void);
	void TurnScan(void);
	bool SuccessiveScan(void);
	void SwingCamera(void);

protected:
	ros::NodeHandle n;
	ros::ServiceClient dyna_client;
	ros::ServiceClient state_client;
};

//=============================================================
//名前：TurnScan
//説明：首振りの方向折り返し
//=============================================================
void ThermalScanning::TurnScan(void)
{
	//std_msgs::Float64 tilt_controller_command_msg; 

	if(cw == -1)	// 左回りの場合
	{
		start_angle = MIN_YAW_ANGLE_CAM;
		end_angle   = MAX_YAW_ANGLE_CAM;
		pm = 1;
	}else if(cw == 1){	// 右回りの場合
		start_angle = MAX_YAW_ANGLE_CAM;
		end_angle   = MIN_YAW_ANGLE_CAM;
		pm = -1;
	}

	// ダイナミクセルのスピードの設定
	if(Scan_state == 0 || Scan_state == 5 || Scan_state == 6)	// 通常探索
	{ 
		srv.request.speed = MOTOR_SPEED;
	}
	else if(Scan_state == 1)	// 強化探索
	{
		srv.request.speed = MOTOR_SPEED2;
	}	
	dyna_client.call(srv);
		
	// ダイナミクセルの角度を初期位置に移動する
	// TODO ダイナミクセルの角度をDyna_angleに変更する処理を入れる
	Dyna_angle = start_angle;

	tilt_controller_command_msg.data = Dyna_angle;
}

//=============================================================
//名前：InitScan
//説明：首振りの初期位置合わせ
//=============================================================
void ThermalScanning::InitScan(void)
{
	srv.request.speed = MOTOR_SPEED;	
	dyna_client.call(srv);
		
	// ダイナミクセルの角度を初期位置に移動する
	Dyna_angle = 0.0;
	tilt_controller_command_msg.data = Dyna_angle;
}

//=============================================================
//名前：SwingCamera
//説明：最も近い障害物の方向へ首振り
//=============================================================
void ThermalScanning::SwingCamera(void)
{
	// ダイナミクセルのスピードの設定
	srv.request.speed = MOTOR_SPEED;
	dyna_client.call(srv);

	Dyna_angle = target_camera_direction; // ロボットから一番近い障害物の方へカメラを向ける
	tilt_controller_command_msg.data = Dyna_angle;
}

//=============================================================
//名前：SuccessiveScan
//説明：熱源探知のための首振り
//=============================================================
bool ThermalScanning::SuccessiveScan(void)
{
	// ダイナミクセルのスピードの設定
	if(Scan_state == 0 || Scan_state == 5 || Scan_state == 6)	// 通常探索
	{ 
		srv.request.speed = MOTOR_SPEED;
	}
	else if(Scan_state == 1)	// 強化探索
	{
		srv.request.speed = MOTOR_SPEED2;
	}	
	dyna_client.call(srv);

	// 強化探索で1周スキャンしてみつからなかったらNormalへ戻る
	if(Scan_state == 1 && state == "Scanning")
	{
		if(scan_count < STEP_COUNT2*4)
		{
			scan_count++;
		}
		else
		{
			scan_count = 0;
			Scan_state = 0;
			state = "Normal";
			state_srv.request.state = state;
			state_client.call(state_srv);
			srv.request.speed = MOTOR_SPEED;
			dyna_client.call(srv);
		}
	}


	// 首振りの処理
	if(pm*Dyna_angle < pm*end_angle - ((Scan_state == 1) ? ONE_STEP_ANGLE_CAM2 : ONE_STEP_ANGLE_CAM)) // 首振りがend_angle以下なら首振り
	{
		if(Scan_state == 1) // 強化探査状態
		{
			// TODO ダイナミクセルの角度をDyna_angleに変更する処理を入れる
			Dyna_angle = Dyna_angle  + (pm*ONE_STEP_ANGLE_CAM2);	// ONE_STEP_ANGLE_CAM2だけ首振り(強化探索)
			tilt_controller_command_msg.data = Dyna_angle;
		}
		else
		{
			// TODO ダイナミクセルの角度をDyna_angleに変更する処理を入れる
			Dyna_angle = Dyna_angle + (pm*ONE_STEP_ANGLE_CAM);	// ONE_STEP_ANGLE_CAMだけ首振り
			tilt_controller_command_msg.data = Dyna_angle;
		}
	}
	else if(pm*Dyna_angle >= pm*end_angle - ((Scan_state == 1) ? ONE_STEP_ANGLE_CAM2 : ONE_STEP_ANGLE_CAM))
	{
		ROS_INFO("4");

		//cw = !cw;
		cw = -cw;
		TurnScan();	// 首振り方向を反転させて初期位置へ移動

		ROS_INFO("5");

		// Stop_temp状態の場合の首振り回数カウント
		if (Scan_state == 5)
		{
			switch_num = switch_num + 1;
			if (switch_num >= 2)
			{
				switch_num = 0;
				return true;	// Stop_temp終了ならtrueを返す
			}
		}
		
	return false;
	}
}

//=============================================
//@name Blob_detect_Callback
//@brief msgで受け取った熱源の有無を変数に格納する
//@data 2013/10/25
//@attention
//=============================================	
void Blobcallback(const std_msgs::Bool::ConstPtr& blobmsg)
{ 
	ros::NodeHandle n;
	ros::ServiceClient state_client = n.serviceClient<set_state::pubState>("pubState");
	ros::ServiceClient dyna_client = n.serviceClient<dynamixel_controllers::SetSpeed>("tilt_controller/set_speed");
		
	dynamixel_controllers::SetSpeed dyna_srv;
	set_state::pubState state_srv;
	bool search_flag = false;

	
	if(state == "Normal" || (state == "Scanning" && Scanning_flag == false) || state == "Stop_temp")
	{
		search_flag = true;
	}
  
	// 通常、強化探査(初期位置へ向かう間を除く)、Stop_temp状態でVictimを検出したら検出状態へ移行
	if (blobmsg->data && search_flag == true)
	{  
		if (Scan_state == 0 ||Scan_state == 5 || Scan_state == 6)
		{
			Scan_state = 3;
			ROS_INFO("Victim Found!(Normal)");
        	state = "Tracking";
			state_srv.request.state = state;
			state_client.call(state_srv);
			//dyna_srv.request.speed = 0.0;
			//dyna_client.call(dyna_srv);
		}
		else if (Scan_state == 1)
		{
			Scan_state = 4;
			ROS_INFO("Victim Found!(Scanning)");
			state = "GetInfo";
			state_srv.request.state = state;
			state_client.call(state_srv);
			//dyna_srv.request.speed = 0.0;
			//dyna_client.call(dyna_srv);
			//TODO: GUIにVictim発見情報を送る
		}
	}  
}

//=============================================
//@name state_Callback
//@brief msgで受け取ったロボットの状態を変数に格納する
//@data 2013/10/25
//@attention
//=============================================	
void state_Callback(const std_msgs::String::ConstPtr& state_msg)
{
	// 取得したstate_msgを変数に格納する
	state = state_msg -> data;

	// 強化探査、待機、Stop_temp(終了)状態から通常状態への移行
	if ((Scan_state == 1 || Scan_state == 2 || Scan_state == 4 || Scan_state == 6) && state == "Normal")
	{
		Scan_state = 0;
		Init_flag = true;
	}
	// 待機もしくはVictim検出(通常)状態から強化探査状態への移行
	else if ((Scan_state == 2 || Scan_state == 3) && state == "Scanning")	
	{
		Scan_state = 1;
		Init_flag = true;
	}
	// 待機状態への移行
	else if (state == "Tracking" || state == "Rotating" || state == "Closing" || state == "GetInfo" || state == "Leaving")
	{
		Scan_state = 2;
	}
}

//=============================================
//@name laserCallback
//@brief レーザーセンサ距離データを取得し一番近い障害物のがある向きを計算
//@data 2014/02/20
//@attention
//=============================================	
void laserCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
	sensor_msgs::LaserScan scan;
	double dist, target0, target_sum;
	int i, index;

	scan = *msg;
	dist = scan.range_max;
	
	for(i=0; i<(scan.angle_max-scan.angle_min)/scan.angle_increment; i++)
	{
		if(scan.ranges[i] < dist)
		{
			dist = scan.ranges[i];
			index = i;
		}
	}
	
	target0 = scan.angle_min + index*scan.angle_increment;
	target0 = (int)(target0*100)/100.0;
	if(target0 > M_PI/2)	target0 = M_PI/2;
	else if(target0 < -M_PI/2)	target0 = -M_PI/2;

	for(int k=1; k<AVE_NUM; k++)
	{
		targets[k] = targets[k-1];
	}
	targets[0] = target0;
	target_sum = 0;
	for(int j=0; j<AVE_NUM; j++)
	{
		target_sum += targets[j];
	}
	
	target_camera_direction = target_sum/AVE_NUM;

	ROS_INFO("target_cam_ang: %f", target_camera_direction);
}


//=============================================
//@name main
//@brief メインループ
//@data 2013/10/25
//@attention
//=============================================	
int main(int argc, char **argv)
{
	// ROSの初期設定
	ros::init(argc, argv, "thermo_scan");

	// 各種設定
	ThermalScanning ts;	// 首振りクラスの定義

	ROS_INFO("1");

	ros::NodeHandle n;

	ros::Rate loop_rate(10);	// ループの待機時間(Hz)

	// 首振り状態送信用のパブリッシャーの定義
	ros::Publisher Scan_state_pub = n.advertise<std_msgs::Int16>("Scan_state", 100);
	ros::Subscriber dyna_sub = n.subscribe("tilt_controller/state", 1000, DynaCallback);
	
	ros::Subscriber laser_sub = n.subscribe("scan", 1000, laserCallback);
	std_msgs::Int16 Scan_state_msg;
	ros::Publisher Dyna_pub = n.advertise<std_msgs::Float64>("tilt_controller/command", 1000);

	// Victim検出結果受信用のサブスクライバーの定義
	ros::Subscriber Blob_detect_sub = n.subscribe("optris/ThermoBlob", 100, Blobcallback);

	// State受信用のサブスクライバーの定義
	ros::Subscriber State_sub = n.subscribe("state", 100, state_Callback);

	double cur_time, interval_time;

	// ダイナミクセルの初期化
	if (Init_flag == true)
	{
		Init_flag == false;
		ts.cw = -1;
		ts.InitScan();
	}

	cur_time = ros::Time::now().toSec();

	// メインループ
	while (ros::ok())
	{
		// コールバックを呼び出してVictim検出結果とロボットの状態を取得
		ros::spinOnce();

		// Dynamixelが目標値近傍へ収束するか、一定時間経つまで待つ
		if(error_cur < error_limit && interval_time > SLEEP_TIME)
		{
			cur_time = ros::Time::now().toSec();
	
			Scanning_flag = false;

			if (Init_flag == true && Scan_state == 1)
			{
				ts.TurnScan();
				Init_flag = false;
				Scanning_flag = true;
			}

			// スキャン状態が通常、強化探査、Stop_tempなら首振り
			if (state != "GetInfo" && state != "Waiting" && state != "Leaving" && (Scan_state == 1 || Scan_state == 5 || Scan_state == 6))
			{
				if(ts.SuccessiveScan() == true)
				{
					Scan_state == 6;
				}
			}
			else if(state != "GetInfo" && state != "Waiting" && state != "Leaving" && Scan_state == 0)
			{
				ts.SwingCamera();
			}
		}
		Dyna_pub.publish(tilt_controller_command_msg);

		//ROS_INFO("Scan_state: %d", Scan_state);//debug

		// カメラユニットの首振り状態の配信
		Scan_state_msg.data = Scan_state;
		Scan_state_pub.publish(Scan_state_msg);             

		// 次のデータを送る前にloop_rateだけ待機
		loop_rate.sleep();

		interval_time = ros::Time::now().toSec() - cur_time;
	}
	return 0;
}
