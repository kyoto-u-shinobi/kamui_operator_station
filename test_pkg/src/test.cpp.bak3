#include "ros/ros.h"
#include "octomap_msgs/Octomap.h"
#include "sensor_msgs/PointCloud.h"
#include "sensor_msgs/PointCloud2.h"
#include "random_numbers/random_numbers.h"
#include "sensor_msgs/point_cloud_conversion.h"
#include <math.h>
#include "my_nav_msgs/OccupancyGrid3d.h"
#include "my_nav_msgs/conversions.h"

#define PI 3.14159265358979

int main(int argc, char **argv)
{
	ros::init(argc, argv, "test_node");
	ros::NodeHandle n;

	ros::Publisher pub = n.advertise<sensor_msgs::PointCloud>("cloud", 10);
	ros::Publisher pub2 = n.advertise<sensor_msgs::PointCloud2>("cloud_in", 10);
	ros::Publisher pub_grid = n.advertise<my_nav_msgs::OccupancyGrid3d>("OcppancyGrid3d", 10);

	ros::Rate loop_rate(40);	

	int count = 0;
	int size = 1080*40;
	while(ros::ok())
	{
		ros::Time current_time = ros::Time::now();

		std_msgs::Header header;
		header.frame_id = "map";
		header.stamp = current_time;

		random_numbers::RandomNumberGenerator rand;

		sensor_msgs::PointCloud cloud;
		cloud.header = header;
		cloud.points.resize(size);
		for(int i=0; i<size; i++)
		{
			cloud.points[i].x = rand.uniform01()/100.0 + cos(i*2*PI/size);
			cloud.points[i].y = rand.uniform01()/100.0 + sin(i*2*PI/size);
			cloud.points[i].z = rand.uniform01();
/*
			cloud.points[i].x = rand.uniform01()*0.5;
			cloud.points[i].y = rand.uniform01()*0.5;
			cloud.points[i].z = rand.uniform01()*0.5;
*/
		}

		//my_nav_msgs::OccupancyGrid3d grid;
/*
		grid.header = header;
		grid.info.resolution = 0.05;
		grid.info.width = 20;
		grid.info.depth = 20;
		grid.info.height = 20;
		grid.info.origin.x = cos(count*PI/180.0);
		grid.info.origin.y = sin(count*PI/180.0);
		int data_size = grid.info.width*grid.info.depth*grid.info.height;
		grid.data.resize(data_size);
		for(int i = 0; i < data_size; i++)
		{
			grid.data[i] = 100;
		}
		//pub_grid.publish(grid);

		my_nav_msgs::convertOccupancyGrid3dToPointCloud(grid, cloud);
*/
		pub.publish(cloud);

		sensor_msgs::PointCloud2 cloud2_in;
		sensor_msgs::convertPointCloudToPointCloud2(cloud, cloud2_in);
		//pub2.publish(cloud2);

		double resolution = 0.05;
/*
		my_nav_msgs::convertPointCloudToOccupancyGrid3d(resolution, cloud, grid);
		pub_grid.publish(grid);

		sensor_msgs::PointCloud2 cloud2;
		my_nav_msgs::convertOccupancyGrid3dToPointCloud2(grid, cloud2);
*/
		sensor_msgs::PointCloud2 cloud2_out;
		my_nav_msgs::convertPointCloud2ToGridData(resolution, cloud2_in, cloud2_out);
		pub2.publish(cloud2_out);
		
		ros::spinOnce();

		loop_rate.sleep();
		++count;
	}

	return 0;
}
