#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>
#include "sensor_msgs/PointCloud.h"
#include "sensor_msgs/PointCloud2.h"
//#include "pcl_conversions/pcl_conversions.h"
#include "sensor_msgs/point_cloud_conversion.h"

#define PI 3.14159265358979

int main(int argc, char **argv)
{
	ros::init(argc, argv, "test_node");
	ros::NodeHandle n;

	ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
	ros::Publisher point_pub = n.advertise<sensor_msgs::PointCloud>("cloud", 1000);
	ros::Publisher point2_pub = n.advertise<sensor_msgs::PointCloud2>("cloud2", 1000);

	ros::Rate loop_rate(100);

	int count = 0;
	while(ros::ok())
	{
		std_msgs::String msg;

		std::stringstream ss;
		ss << "hello world " << count;
		msg.data = ss.str();

		ROS_INFO("%s", msg.data.c_str());

		chatter_pub.publish(msg);

		sensor_msgs::PointCloud cloud;
		cloud.header.frame_id = "map";
		cloud.header.stamp = ros::Time::now();
		cloud.points.resize(1);

		cloud.points[0].x = cos(count*PI/180.0);
		cloud.points[0].y = sin(count*PI/180.0);
		cloud.points[0].z = 0.0;

		point_pub.publish(cloud);

		sensor_msgs::PointCloud2 cloud2;
		//pcl::toROSMsg(&cloud, &cloud2);
		sensor_msgs::convertPointCloudToPointCloud2(cloud, cloud2);
		point2_pub.publish(cloud2);

		ros::spinOnce();

		loop_rate.sleep();
		++count;
	}

	return 0;
}
