#include "ros/ros.h"
#include "std_msgs/String.h"
#include "nav_msgs/Odometry.h"
#include "wall_follower/walls.h"
#include "nav_msgs/OccupancyGrid.h"
#include "nav_msgs/GridCells.h"
#include <math.h>
#include <tf/transform_datatypes.h>
#include "dynamixel_msgs/JointState.h"
#include "std_msgs/Float64.h"
#include <tf/transform_listener.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include "std_msgs/UInt16MultiArray.h"
#include "set_state/pubState.h"

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

#define	ROAD_WIDTH	850		//!< 道の幅[m]//900mm...(JapanOpen),1200mm(WorldCup)
#define	MinF 350//270 //ROAD_WIDTH/2-100,				/*前方の閾値*/          
#define	MaxL ROAD_WIDTH/2+100 //450				/*左方の閾値(max)*/  
#define Ld	350//400		// 壁から離れるべき距離の目標値 [mm]  

#define R_th	0.4//0.15	// [m]
#define TH_th	0.2//0.1	// [rad]
#define PARALLEL_th			200//20 // [mm]
#define WALL_DIST_ERR_th	200//20 // [mm]
#define CHECK_th	0.5 // [m]
#define CHECK_ANGLE_th	1.0 // [rad]

#define DYNA_ERR_th	0.05	// [rad]

#define OBSERVED	127		// 緑（rviz上での表示色）
#define UNSIGHT		-2		// 黄

#define GOAL_SET_COUNT_MAX	5	// goal再設定回数の上限


geometry_msgs::Pose curpos;
nav_msgs::OccupancyGrid map0;
double distL, distR;
int flag_init = 0;
int flag_init2 = 0;
int flag_dyna = 0;
int flag_dyna_scan = 0;
int flag_dyna_screen = 0;
int flag_map = 0;
double error_cur = 2*M_PI;
std::string state0 = "Waiting";

//====================================================//
//	@class 距離データの定義
//====================================================//
class Distance{
public:
	Distance(){
		Clear();
	}
	~Distance(){
	}
	void Clear(void){//適当に大きな値で初期化
		front  = 10000;
		left   = 10000;
		right  = 10000;
		left2  = 10000;
		right2 = 10000;
	}

public:
	double front;	//前方 [mm]
	double left;	//左前 [mm]
	double right;	//右前 [mm]
	double left2;	//左後 [mm]
	double right2;	//右後 [mm]
};

Distance dist;

void odomCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
	curpos = msg->pose.pose;
	if(!flag_init)
	{
		flag_init = 1;
		ROS_INFO("odomCallback");
	}
}

void wallsCallback(const wall_follower::walls::ConstPtr& msg)
{
	dist.Clear();
	
	dist.front = msg->front;
	dist.left = msg->left;
	dist.left2 = msg->left2;
	dist.right = msg->right;
	dist.right2 = msg->right2;

	distL = (dist.left + dist.left2)/2;
	distR = (dist.right + dist.right2)/2;
	
	//ROS_INFO("%f %f %f %f %f", dist.front, dist.right, dist.left, dist.right2, dist.left2);//debug
	//ROS_INFO("%f %f", distL, distR);//debug
	
	if(!flag_init2)
	{
		flag_init2 = 1;
		ROS_INFO("wallsCallback");
	}
}

void mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)
{
	map0 = *msg;
	if(!flag_map)
	{
		flag_map = 1;
		ROS_INFO("mapCallback");
	}
}

void DynaCallback(const dynamixel_msgs::JointState::ConstPtr& msg)
{                      
	error_cur = fabs(msg->error);
	//ROS_INFO("current error: %f [rad]", error_cur);	//debug
}

void state_Callback(const std_msgs::String::ConstPtr& state_msg)
{
	// 取得したstate_msgを変数に格納する
	state0 = state_msg -> data;
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "frontier_with_wallfollower_node");

	ros::NodeHandle n;

	ros::Subscriber odom_sub = n.subscribe("odom", 1000, odomCallback);
	ros::Subscriber walls_sub = n.subscribe("walls", 1000, wallsCallback);
	ros::Subscriber map_sub = n.subscribe("filtered_map", 10, mapCallback);
	ros::Subscriber dyna_sub = n.subscribe("tilt_controller/state", 1000, DynaCallback);
	ros::Publisher dyna_pub = n.advertise<std_msgs::Float64>("tilt_controller/command", 1000);
	ros::Publisher cells_pub = n.advertise<nav_msgs::GridCells>("NG_cells", 1000);
	ros::ServiceClient state_client = n.serviceClient<set_state::pubState>("pubState");
	ros::Subscriber State_sub = n.subscribe("state", 100, state_Callback);

	ros::Publisher inipos_pub = n.advertise<geometry_msgs::Pose>("inipos", 1000);//debug

	//tell the action client that we want to spin a thread by default
	MoveBaseClient ac("move_base", true);

	std::string mode;	
	geometry_msgs::Pose inipos, chkpos;
	std_msgs::Float64 dyna_goal;
	double curdist, chkdist, errang, chkang;
	tf::TransformListener listener;
	geometry_msgs::Pose goal_pose;
	nav_msgs::OccupancyGrid map;
	double yaw, trans_rot;
	std_msgs::UInt16MultiArray ng_index;
	int ng_count = 0;
	nav_msgs::GridCells cells;
	set_state::pubState state_srv;

	ros::Rate loop_rate(10);

	std::string state = "Waiting";	// ロボットの状態
	state_srv.request.state = state;
	state_client.call(state_srv);

	int flag = -1;
	ROS_INFO("flag = %d", flag);
	inipos_pub.publish(inipos);//debug

	while (ros::ok())
	{
		if(flag == -1 && state0 == "Following")
		{
			flag = 0;
			ROS_INFO("flag = %d", flag);
		}
		if(flag == 0 && flag_init2 == 1 && flag_map == 1)
		{
			/*
			if(distR < distL)	// 右の壁に近い
			{
				mode = "right";
				dyna_goal.data = -M_PI/2;
			}
			else	// 左の壁に近い
			{
				mode = "left";
				dyna_goal.data = M_PI/2;
			}
			*/
			tf::StampedTransform transform;
    		try
			{
				//listener.lookupTransform("/map", "/base_link", ros::Time(0), transform); // /mapにおけるbaseの位置
				ros::Time now = ros::Time(0);
    			listener.waitForTransform("/map", "/base_link", now, ros::Duration(3.0));
    			listener.lookupTransform("/map", "/base_link", now, transform);
    		}
	    	catch (tf::TransformException ex)
			{
      			ROS_ERROR("%s",ex.what());
  			}
			map = map0;
			trans_rot = tf::getYaw(transform.getRotation());
			yaw = tf::getYaw(map.info.origin.orientation);

			double xi, yi, xg, yg;
			double thd, target;
			double dist_cur;
			double dist_unsight = 10000;

			for(int i=0; i<map.data.size(); i++)
			{
				if(map.data[i] == UNSIGHT)
				{
					xi = (i%map.info.width)*map.info.resolution + map.info.resolution/2;
					yi = (i/map.info.width)*map.info.resolution + map.info.resolution/2;
					xg = map.info.origin.position.x + xi*cos(yaw) - yi*sin(yaw);
					yg = map.info.origin.position.y + xi*sin(yaw) + yi*cos(yaw);

					dist_cur = sqrt(pow(transform.getOrigin().x()-xg, 2.0) + pow(transform.getOrigin().y()-yg, 2.0));

					if(dist_unsight > dist_cur)
					{
						dist_unsight = dist_cur;
						thd = atan2(yg-transform.getOrigin().y(), xg-transform.getOrigin().x());
					}
				}
			}
			target = thd - trans_rot;
			if(target > M_PI)	target -= 2*M_PI;
			else if(target < -M_PI)	target += 2*M_PI;

			if(target < 0)	// 未観測障害物は右の壁に近い
			{
				mode = "right";
				dyna_goal.data = -M_PI/2;
			}
			else	// 未観測障害物は左の壁に近い
			{
				mode = "left";
				dyna_goal.data = M_PI/2;
			}

			dyna_pub.publish(dyna_goal);
			if(flag_dyna == 0 && error_cur > DYNA_ERR_th)
			{
				flag_dyna = 1;
			}
			if(flag_dyna == 1 && error_cur < DYNA_ERR_th)
			{
				inipos = curpos;
				inipos_pub.publish(inipos);//debug
				ROS_INFO("Set initial position");
				ros::param::set("wall_follower_node/right_or_left", mode);
				ROS_INFO("Follow %s walls!", mode.c_str());

				flag = 1;
				ROS_INFO("flag = %d", flag);
				flag_dyna = 0;
			}
		}
		else if(flag == 1)
		{
			curdist = sqrt(pow(inipos.position.x - curpos.position.x, 2) + pow(inipos.position.y - curpos.position.y, 2));
			if(curdist > R_th)
			{
				flag = 2;
				ROS_INFO("flag = %d", flag);
			}
		}
		else if(flag == 2 && flag_init == 1)
		{
			double para_dist, wall_dist_err;
			if(mode == "right")
			{
				para_dist = fabs(dist.right - dist.right2);
				wall_dist_err = fabs((dist.right + dist.right2)/2 - Ld);
			}
			else if(mode == "left")
			{
				para_dist = fabs(dist.left - dist.left2);
				wall_dist_err = fabs((dist.left + dist.left2)/2 - Ld);
			}
			if(para_dist < PARALLEL_th && wall_dist_err < WALL_DIST_ERR_th)	// ある程度壁と平行になるまで待つ
			{
				inipos = curpos;
				inipos_pub.publish(inipos);//debug
				ROS_INFO("Set initial position 2");
				flag = 3;
				ROS_INFO("flag = %d", flag);
			}
		}
		else if(flag == 3)
		{
			curdist = sqrt(pow(inipos.position.x - curpos.position.x, 2) + pow(inipos.position.y - curpos.position.y, 2));
			if(curdist > R_th)
			{
				flag = 4;
				ROS_INFO("flag = %d", flag);
			}
		}
		else if(flag == 4)
		{
			curdist = sqrt(pow(inipos.position.x - curpos.position.x, 2) + pow(inipos.position.y - curpos.position.y, 2));
			errang = tf::getYaw(inipos.orientation) - tf::getYaw(curpos.orientation);
			//ROS_INFO("iniang=%f   curang=%f", tf::getYaw(inipos.orientation), tf::getYaw(curpos.orientation));//debug

			chkdist = sqrt(pow(chkpos.position.x - curpos.position.x, 2) + pow(chkpos.position.y - curpos.position.y, 2));	
			chkang = tf::getYaw(chkpos.orientation) - tf::getYaw(curpos.orientation);		

			if(curdist < R_th && fabs(errang) < TH_th)	// 初期位置付近に戻ってきたとき
			{
				ros::param::set("wall_follower_node/right_or_left", "stop");
				ROS_INFO("Stop!");
				flag = 5;
				ROS_INFO("flag = %d", flag);
				dyna_goal.data = 0;
				dyna_pub.publish(dyna_goal);

				state = "Moving";	// Movingモードへ
				state_srv.request.state = state;
			}
			else if ((dist.front < MinF && flag_dyna_scan == 0) || flag_dyna_scan == 1 || flag_dyna_scan == 2)	// 前方に壁があるとき
			{
				ros::param::set("wall_follower_node/right_or_left", "stop");
				if(!flag_dyna_screen) ROS_INFO("Stop! (temp)");

				chkpos = curpos;

				if(flag_dyna_scan == 0)
				{
					flag_dyna_scan = 1;
				}
				else if(flag_dyna_scan == 1)
				{
					dyna_goal.data = 0;
				}
				else if(flag_dyna_scan == 2)
				{
					if(mode == "right")
					{
						dyna_goal.data = -M_PI/2;
					}
					else if(mode == "left")
					{
						dyna_goal.data = M_PI/2;
					}
				}
				
				dyna_pub.publish(dyna_goal);
				if(flag_dyna == 0 && error_cur > DYNA_ERR_th)
				{
					flag_dyna = 1;
				}
				if(flag_dyna == 1 && error_cur < DYNA_ERR_th)
				{
					flag_dyna_scan++;
					flag_dyna = 0;
					flag_dyna_screen = 0;
				}

				if(!flag_dyna_screen)
				{
					ROS_INFO("flag_dyna_scan = %d", flag_dyna_scan);
					flag_dyna_screen = 1;
				}
			}
			else if (dist.front > MinF && flag_dyna_scan >= 3 && (chkdist > CHECK_th || fabs(chkang) > CHECK_ANGLE_th))	// 前方に壁が無く、前回停止位置から離れたとき
			{
				flag_dyna_scan = 0;
				ROS_INFO("flag_dyna_scan = %d", flag_dyna_scan);
			}
			else
			{
				if(flag_dyna_scan >= 3)	ros::param::set("wall_follower_node/right_or_left", mode);
			}
		}
		else if(flag == 5)
		{
			tf::StampedTransform transform;
    		try
			{
				listener.lookupTransform("/map", "/base_link", ros::Time(0), transform); // /mapにおけるbaseの位置
    		}
	    	catch (tf::TransformException ex)
			{
      			ROS_ERROR("%s",ex.what());
  			}

			map = map0;
			yaw = tf::getYaw(map.info.origin.orientation);

			double xi, yi, xg, yg;
			double xd, yd, thd;
			double dist_cur;
			double dist_unsight = 10000;
			int index, flag_ng;

			int flag_unsight = 0;

			for(int i=0; i<map.data.size(); i++)
			{
				flag_ng = 0;
				if(map.data[i] == UNSIGHT)
				{
					for(int j=0; j<ng_index.data.size(); j++)
					{
						if(i == ng_index.data[j])
						{
							flag_ng = 1;
						}
					}

					if(!flag_ng)
					{
						xi = (i%map.info.width)*map.info.resolution + map.info.resolution/2;
						yi = (i/map.info.width)*map.info.resolution + map.info.resolution/2;
						xg = map.info.origin.position.x + xi*cos(yaw) - yi*sin(yaw);
						yg = map.info.origin.position.y + xi*sin(yaw) + yi*cos(yaw);

						dist_cur = sqrt(pow(transform.getOrigin().x()-xg, 2.0) + pow(transform.getOrigin().y()-yg, 2.0));

						if(dist_unsight > dist_cur)
						{
							dist_unsight = dist_cur;
							xd = xg;
							yd = yg;
							thd = atan2(yg-transform.getOrigin().y(), xg-transform.getOrigin().x());
							index = i;
							flag_unsight = 1;
						}
					}
				}
			}

			if(!flag_unsight)
			{
				ROS_INFO("Finish!!");
				flag = 6;
				ROS_INFO("flag = %d", flag);
			}
			else
			{
				//wait for the action server to come up
				while(!ac.waitForServer(ros::Duration(5.0))){
					ROS_INFO("Waiting for the move_base action server to come up");
				}
		
				move_base_msgs::MoveBaseGoal goal;
	
				//we'll send a goal to the robot to move 1 meter forward
				goal.target_pose.header.frame_id = "map";
				goal.target_pose.header.stamp = ros::Time::now();

				goal_pose.position.x = xd - Ld/1000.0*cos(thd);
				goal_pose.position.y = yd - Ld/1000.0*sin(thd);

				//goal_pose.orientation.w = 1.0;

				double direc;
				if(thd > 0)
				{
					direc = M_PI/2;
				}
				else
				{
					direc = -M_PI/2;
				}
				goal_pose.orientation = tf::createQuaternionMsgFromYaw(thd + direc);

				goal.target_pose.pose = goal_pose;

				ROS_INFO("Send goal");
				ac.sendGoal(goal);

				//ROS_INFO("waitForResult()1");//debug
				//ac.waitForResult(ros::Duration(30.0));
				//ROS_INFO("waitForResult()2");//debug
	
				geometry_msgs::Pose chkpos2, chkpos20;
				double chkdist2;
				int set_count = 0;
				while(!ac.waitForResult(ros::Duration(10.0)))
				{
					ROS_INFO("Send goal again");
					ac.sendGoal(goal);
					chkpos20 = chkpos2;
					chkpos2 = curpos;
					chkdist2 = sqrt(pow(chkpos2.position.x - chkpos20.position.x, 2) + pow(chkpos2.position.y - chkpos20.position.y, 2));
					if(chkdist2 < CHECK_th)	// 移動量が少ないときにカウント
					{						
						set_count++;
					}
					if(set_count > GOAL_SET_COUNT_MAX)	// 何回か再設定してもたどり着けないとき
					{
						if(distR < distL)	// 右の壁に近い
						{
							mode = "right";
						}
						else	// 左の壁に近い
						{
							mode = "left";
						}
						ros::param::set("wall_follower_node/right_or_left", mode);	// 少し移動する
						ROS_INFO("Follow %s walls for about %f meter", mode.c_str(), CHECK_th);

						ros::Duration(3.0).sleep();	//	3秒間走る
						
						ros::param::set("wall_follower_node/right_or_left", "stop");
						ROS_INFO("Stop!", mode.c_str());

						set_count = 0;	// カウントリセット

						ROS_INFO("Send goal again");
						ac.sendGoal(goal);
					}
				}

				if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
				{
					ROS_INFO("Goal!");
					flag = 0;
					ROS_INFO("flag = %d", flag);

					state = "Following";	// Followingモードへ
					state_srv.request.state = state;
				}
				else if(ac.getState() == actionlib::SimpleClientGoalState::ABORTED)
				{
					ROS_INFO("Aborted...");
					ng_count++;
					ng_index.data.resize(ng_count);
					ng_index.data[ng_count-1] = index;
					ROS_INFO("Index %d is added to NG index list", index);

					cells.header.frame_id = "/map";
					cells.header.stamp = ros::Time::now();
					cells.cell_width = map.info.resolution;
					cells.cell_height = map.info.resolution;
				
					cells.cells.resize(ng_count);
					xi = (index%map.info.width)*map.info.resolution + map.info.resolution/2;
					yi = (index/map.info.width)*map.info.resolution + map.info.resolution/2;
					cells.cells[ng_count-1].x = map.info.origin.position.x + xi*cos(yaw) - yi*sin(yaw);
					cells.cells[ng_count-1].y = map.info.origin.position.y + xi*sin(yaw) + yi*cos(yaw);

					cells_pub.publish(cells);
				}
				else
				{
					ROS_INFO("The base failed to move for some reason");
				}
			}
		}
		else if(flag == 6)
		{
			cells_pub.publish(cells);
			//finish!
		}
		
		ros::spinOnce();

		loop_rate.sleep();
	}
}
