#include <ros/ros.h>
#include "serial/serial.h"
#include <iostream>
#include <vector>
#include <string>
#include "std_msgs/Float64.h"
#include "std_msgs/Int8.h"
#include "stbee_serial/setPwm.h"

#define RX_DATA_SIZE 5
#define TIMEOUT 1000
#define CONTROL_F 100 // rate of sending control input [Hz]

#define PI 3.14159265358979

using std::string;
using std::exception;
using std::cout;
using std::cerr;
using std::endl;

int flag_pub;
uint8_t tx_data;
int8_t duty;

bool set_pwm(stbee_serial::setPwm::Request  &req,
		 	 stbee_serial::setPwm::Response &res)
{
	if(req.pwm > 100)
    {
        duty = 100;
    }
    else if(req.pwm < -100)
    {
        duty = -100;
    }
    else
    {
        duty = req.pwm;
    }
    tx_data = (uint8_t)(duty + 0x7f);
    flag_pub = 1;
}

void pwmCallback(const std_msgs::Int8::ConstPtr& msg)
{
    if(msg->data > 100)
    {
        duty = 100;
    }
    else if(msg->data < -100)
    {
        duty = -100;
    }
    else
    {
        duty = msg->data;
    }
    tx_data = (uint8_t)(duty + 0x7f);
    flag_pub = 1;
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "stbee_serial_node");
    ros::NodeHandle n;

    // Publisher and Subscriber
    ros::Publisher gimbang_pub = n.advertise<std_msgs::Float64>("gimbal_angle", 10); //[rad]
    ros::Subscriber pwm_sub = n.subscribe("gimbal_pwm", 1000, pwmCallback);
	ros::ServiceServer service = n.advertiseService("set_gimbal_pwm", set_pwm);

    // port, baudrate, timeout in milliseconds
    serial::Serial my_serial("/dev/ttyACM0", 115200, serial::Timeout::simpleTimeout(1000));

    cout << "Is the serial port open?";
    if(my_serial.isOpen())
      cout << " Yes." << endl;
    else
      cout << " No." << endl;

    // motor stop
    tx_data = 0x7f;
    my_serial.write(&tx_data, 1);
    ros::Duration(0.2).sleep();

    short count;
    int sync;
    std_msgs::Float64 gimbal_angle;

    uint8_t rx_data[RX_DATA_SIZE*2];

    flag_pub = 0;

    ros::Rate r(CONTROL_F);
    while(ros::ok())
    {
        if(flag_pub == 1)
        {
            //tx_data = 0x0a;
            int result = my_serial.write(&tx_data, 1);
            //ros::Duration(0.2).sleep();
            flag_pub = 0;
            ROS_INFO("Send duty = %d %s", duty, (result==1)?"success!":"fail...");//debug
        }

		my_serial.flushInput();
        for(int i=0; i<RX_DATA_SIZE*2; i++)
        {
            my_serial.read(&rx_data[i], 1);
        }

		for(int i=0; i<=RX_DATA_SIZE; i++)
		{
			ROS_INFO("i = %d, [i] = %d, [i+1] = %d", i, (int)rx_data[i], (int)rx_data[i+1]);//debug
		    if(rx_data[i] == 0xff && rx_data[i+1] == 0xff)
		    {
		        count = (short)(rx_data[i+2] << 8) + (short)(rx_data[i+3]);

		        sync = (int)rx_data[i+4];

				ROS_INFO("count = %d", count);//debug
		        //cout << count << "  " << sync;
		        //cout << endl;

		        // gimbal angle
		        gimbal_angle.data = -(count - 0x7fff) / (128.0*32.0) * 2*PI + PI;
				gimbang_pub.publish(gimbal_angle);
				break;
		    }
        }

        ros::spinOnce();
        r.sleep();
    }

	// motor stop
    tx_data = 0x7f;
    my_serial.write(&tx_data, 1);
    ros::Duration(0.2).sleep();
}
